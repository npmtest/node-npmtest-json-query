{"/home/travis/build/npmtest/node-npmtest-json-query/test.js":"/* istanbul instrument in package npmtest_json_query */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-query/lib.npmtest_json_query.js":"/* istanbul instrument in package npmtest_json_query */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_json_query = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_json_query = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-json-query/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-json-query && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_json_query */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_json_query\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_json_query.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_json_query.rollup.js'] =\n            local.assetsDict['/assets.npmtest_json_query.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_json_query.__dirname +\n                    '/lib.npmtest_json_query.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-query/json-query/index.js":"var State = require('./lib/state')\nvar tokenize = require('./lib/tokenize')\n\nvar tokenizedCache = {}\n\nmodule.exports = function jsonQuery (query, options) {\n\n  // extract params for ['test[param=?]', 'value'] type queries\n  var params = options && options.params || null\n  if (Array.isArray(query)) {\n    params = query.slice(1)\n    query = query[0]\n  }\n\n  if (!tokenizedCache[query]) {\n    tokenizedCache[query] = tokenize(query, true)\n  }\n\n  return handleQuery(tokenizedCache[query], options, params)\n}\n\n\nmodule.exports.lastParent = function (query) {\n  var last = query.parents[query.parents.length - 1]\n  if (last) {\n    return last.value\n  } else {\n    return null\n  }\n}\n\n\nfunction handleQuery (tokens, options, params) {\n  var state = new State(options, params, handleQuery)\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (handleToken(tokens[i], state)) {\n      break\n    }\n  }\n\n  // flush\n  handleToken(null, state)\n\n  // set databind hooks\n  if (state.currentItem instanceof Object) {\n    state.addReference(state.currentItem)\n  } else {\n    var parentObject = getLastParentObject(state.currentParents)\n    if (parentObject) {\n      state.addReference(parentObject)\n    }\n  }\n\n  return {\n    value: state.currentItem,\n    key: state.currentKey,\n    references: state.currentReferences,\n    parents: state.currentParents\n  }\n}\n\nfunction handleToken (token, state) {\n  // state: setCurrent, getValue, getValues, resetCurrent, deepQuery, rootContext, currentItem, currentKey, options, filters\n\n  if (token == null) {\n    // process end of query\n    if (!state.currentItem && state.options.force) {\n      state.force(state.options.force)\n    }\n  } else if (token.values) {\n    if (state.currentItem) {\n      var keys = Object.keys(state.currentItem)\n      var values = []\n      keys.forEach(function (key) {\n        if (token.deep && Array.isArray(state.currentItem[key])) {\n          state.currentItem[key].forEach(function (item) {\n            values.push(item)\n          })\n        } else {\n          values.push(state.currentItem[key])\n        }\n      })\n      state.setCurrent(keys, values)\n    } else {\n      state.setCurrent(keys, [])\n    }\n  } else if (token.get) {\n    var key = state.getValue(token.get)\n    if (shouldOverride(state, key)) {\n      state.setCurrent(key, state.override[key])\n    } else {\n      if (state.currentItem || (state.options.force && state.force({}))) {\n        if (isDeepAccessor(state.currentItem, key) || token.multiple) {\n          var values = state.currentItem.map(function (item) {\n            return item[key]\n          }).filter(isDefined)\n\n          values = Array.prototype.concat.apply([], values) // flatten\n\n          state.setCurrent(key, values)\n        } else {\n          state.setCurrent(key, state.currentItem[key])\n        }\n      } else {\n        state.setCurrent(key, null)\n      }\n    }\n  } else if (token.select) {\n    if (Array.isArray(state.currentItem) || (state.options.force && state.force([]))) {\n      var match = (token.boolean ? token.select : [token]).map(function (part) {\n        if (part.op === ':') {\n          var key = state.getValue(part.select[0])\n          return {\n            func: function (item) {\n              if (key) {\n                item = item[key]\n              }\n              return state.getValueFrom(part.select[1], item)\n            },\n            negate: part.negate,\n            booleanOp: part.booleanOp\n          }\n        } else {\n          var selector = state.getValues(part.select)\n          if (!state.options.allowRegexp && part.op === '~' && selector[1] instanceof RegExp) throw new Error('options.allowRegexp is not enabled.')\n          return {\n            key: selector[0],\n            value: selector[1],\n            negate: part.negate,\n            booleanOp: part.booleanOp,\n            op: part.op\n          }\n        }\n      })\n\n      if (token.multiple) {\n        var keys = []\n        var value = []\n        state.currentItem.forEach(function (item, i) {\n          if (matches(item, match)) {\n            keys.push(i)\n            value.push(item)\n          }\n        })\n        state.setCurrent(keys, value)\n      } else {\n        if (!state.currentItem.some(function (item, i) {\n          if (matches(item, match)) {\n            state.setCurrent(i, item)\n            return true\n          }\n        })) {\n          state.setCurrent(null, null)\n        }\n      }\n    } else {\n      state.setCurrent(null, null)\n    }\n  } else if (token.root) {\n    state.resetCurrent()\n    if (token.args && token.args.length) {\n      state.setCurrent(null, state.getValue(token.args[0]))\n    } else {\n      state.setCurrent(null, state.rootContext)\n    }\n  } else if (token.parent) {\n    state.resetCurrent()\n    state.setCurrent(null, state.options.parent)\n  } else if (token.or) {\n    if (state.currentItem) {\n      return true\n    } else {\n      state.resetCurrent()\n      state.setCurrent(null, state.context)\n    }\n  } else if (token.filter) {\n    var helper = state.getLocal(token.filter) || state.getGlobal(token.filter)\n    if (typeof helper === 'function') {\n      // function(input, args...)\n      var values = state.getValues(token.args || [])\n      var result = helper.apply(state.options, [state.currentItem].concat(values))\n      state.setCurrent(null, result)\n    } else {\n      // fallback to old filters\n      var filter = state.getFilter(token.filter)\n      if (typeof filter === 'function') {\n        var values = state.getValues(token.args || [])\n        var result = filter.call(state.options, state.currentItem, {args: values, state: state, data: state.rootContext})\n        state.setCurrent(null, result)\n      }\n    }\n  } else if (token.deep) {\n    if (state.currentItem) {\n      if (token.deep.length === 0) {\n        return\n      }\n\n      var result = state.deepQuery(state.currentItem, token.deep, state.options)\n      if (result) {\n        state.setCurrent(result.key, result.value)\n        for (var i = 0; i < result.parents.length; i++) {\n          state.currentParents.push(result.parents[i])\n        }\n      } else {\n        state.setCurrent(null, null)\n      }\n    } else {\n      state.currentItem = null\n    }\n  }\n}\n\nfunction matches (item, parts) {\n  var result = false\n  for (var i = 0; i < parts.length; i++) {\n    var opts = parts[i]\n    var r = false\n    if (opts.func) {\n      r = opts.func(item)\n    } else if (opts.op === '~') {\n      if (opts.value instanceof RegExp) {\n        r = item[opts.key] && !!item[opts.key].match(opts.value)\n      } else {\n        r = item[opts.key] && !!~item[opts.key].indexOf(opts.value)\n      }\n    } else if (opts.op === '=') {\n      if ((item[opts.key] === true && opts.value === 'true') || (item[opts.key] === false && opts.value === 'false')) {\n        r = true\n      } else {\n        r = item[opts.key] == opts.value\n      }\n    } else if (opts.op === '>') {\n      r = item[opts.key] > opts.value\n    } else if (opts.op === '<') {\n      r = item[opts.key] < opts.value\n    } else if (opts.op === '>=') {\n      r = item[opts.key] >= opts.value\n    } else if (opts.op === '<=') {\n      r = item[opts.key] <= opts.value\n    }\n\n    if (opts.negate) {\n      r = !r\n    }\n    if (opts.booleanOp === '&') {\n      result = result && r\n    } else if (opts.booleanOp === '|') {\n      result = result || r\n    } else {\n      result = r\n    }\n  }\n\n  return result\n}\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined'\n}\n\nfunction shouldOverride (state, key) {\n  return state.override && state.currentItem === state.rootContext && state.override[key] !== undefined\n}\n\nfunction isDeepAccessor (currentItem, key) {\n  return currentItem instanceof Array && parseInt(key) != key\n}\n\nfunction getLastParentObject (parents) {\n  for (var i = 0; i < parents.length; i++) {\n    if (!(parents[i + 1]) || !(parents[i + 1].value instanceof Object)) {\n      return parents[i].value\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-json-query/json-query/lib/state.js":"module.exports = State\n\nfunction State(options, params, handleQuery){\n\n  options = options || {}\n\n  //this.options = options\n  this.handleQuery = handleQuery\n  this.options = options\n  this.locals = this.options.locals || {}\n  this.globals = this.options.globals || {}\n  this.rootContext = firstNonNull(options.data, options.rootContext, options.context, options.source)\n  this.parent = options.parent\n  this.override = options.override\n  this.filters = options.filters || {}\n  this.params = params || options.params || []\n  this.context = firstNonNull(options.currentItem, options.context, options.source)\n  this.currentItem = firstNonNull(this.context, options.rootContext, options.data)\n  this.currentKey = null\n  this.currentReferences = []\n  this.currentParents = []\n}\n\nState.prototype = {\n\n  // current manipulation\n  setCurrent: function(key, value){\n    if (this.currentItem || this.currentKey || this.currentParents.length>0){\n      this.currentParents.push({key: this.currentKey, value: this.currentItem})\n    }\n    this.currentItem = value\n    this.currentKey = key\n  },\n\n  resetCurrent: function(){\n    this.currentItem = null\n    this.currentKey = null\n    this.currentParents = []\n  },\n\n  force: function(def){\n    var parent = this.currentParents[this.currentParents.length-1]\n    if (!this.currentItem && parent && (this.currentKey != null)){\n      this.currentItem = def || {}\n      parent.value[this.currentKey] = this.currentItem\n    }\n    return !!this.currentItem\n  },\n\n  getLocal: function(localName){\n    if (~localName.indexOf('/')){\n      var result = null\n      var parts = localName.split('/')\n\n      for (var i=0;i<parts.length;i++){\n        var part = parts[i]\n        if (i == 0){\n          result = this.locals[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.locals[localName]\n    }\n  },\n\n  getGlobal: function(globalName){\n    if (~globalName.indexOf('/')){\n      var result = null\n      var parts = globalName.split('/')\n\n      for (var i=0;i<parts.length;i++){\n        var part = parts[i]\n        if (i == 0){\n          result = this.globals[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.globals[globalName]\n    }\n  },\n\n  getFilter: function(filterName){\n    if (~filterName.indexOf('/')){\n      var result = null\n      var filterParts = filterName.split('/')\n\n      for (var i=0;i<filterParts.length;i++){\n        var part = filterParts[i]\n        if (i == 0){\n          result = this.filters[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.filters[filterName]\n    }\n  },\n\n  addReferences: function(references){\n    if (references){\n      references.forEach(this.addReference, this)\n    }\n  },\n\n  addReference: function(ref){\n    if (ref instanceof Object && !~this.currentReferences.indexOf(ref)){\n      this.currentReferences.push(ref)\n    }\n  },\n\n  // helper functions\n  getValues: function(values, callback){\n    return values.map(this.getValue, this)\n  },\n\n  getValue: function (value) {\n    return this.getValueFrom(value, null)\n  },\n\n  getValueFrom: function (value, item) {\n    if (value._param != null){\n      return this.params[value._param]\n    } else if (value._sub){\n\n      var options = copy(this.options)\n      options.force = null\n      options.currentItem = item\n\n      var result = this.handleQuery(value._sub, options, this.params)\n      this.addReferences(result.references)\n      return result.value\n\n    } else {\n      return value\n    }\n  },\n\n  deepQuery: function(source, tokens, options, callback){\n    var keys = Object.keys(source)\n\n    for (var key in source){\n      if (key in source){\n\n        var options = copy(this.options)\n        options.currentItem = source[key]\n\n        var result = this.handleQuery(tokens, options, this.params)\n\n        if (result.value){\n          return result\n        }\n      }\n    }\n\n    return null\n  }\n\n}\n\nfunction firstNonNull(args){\n  for (var i=0;i<arguments.length;i++){\n    if (arguments[i] != null){\n      return arguments[i]\n    }\n  }\n}\n\nfunction copy(obj){\n  var result = {}\n  if (obj){\n    for (var key in obj){\n      if (key in obj){\n        result[key] = obj[key]\n      }\n    }\n  }\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-json-query/json-query/lib/tokenize.js":"// todo: syntax checking\n// todo: test handle args\nvar depthSplit = require('./depth-split')\n\nmodule.exports = function(query, shouldAssignParamIds){\n  if (!query) return []\n\n  var result = []\n    , prevChar, char\n    , nextChar = query.charAt(0)\n    , bStart = 0\n    , bEnd = 0\n    , partOffset = 0\n    , pos = 0\n    , depth = 0\n    , mode = 'get'\n    , deepQuery = null\n\n  // if query contains params then number them\n  if (shouldAssignParamIds){\n    query = assignParamIds(query)\n  }\n\n  var tokens = {\n    '.': {mode: 'get'},\n    ':': {mode: 'filter'},\n    '|': {handle: 'or'},\n    '[': {open: 'select'},\n    ']': {close: 'select'},\n    '{': {open: 'meta'},\n    '}': {close: 'meta'},\n    '(': {open: 'args'},\n    ')': {close: 'args'}\n  }\n\n  function push(item){\n    if (deepQuery){\n      deepQuery.push(item)\n    } else {\n      result.push(item)\n    }\n  }\n\n  var handlers = {\n    get: function(buffer){\n      var trimmed = typeof buffer === 'string' ? buffer.trim() : null\n      if (trimmed){\n        push({get:trimmed})\n      }\n    },\n    select: function(buffer){\n      if (buffer){\n        push(tokenizeSelect(buffer))\n      } else {\n        // deep query override\n        var x = {deep: []}\n        result.push(x)\n        deepQuery = x.deep\n      }\n    },\n    filter: function(buffer){\n      if (buffer){\n        push({filter:buffer.trim()})\n      }\n    },\n    or: function(){\n      deepQuery = null\n      result.push({or:true})\n      partOffset = i + 1\n    },\n    args: function(buffer){\n      var args = tokenizeArgs(buffer)\n      result[result.length-1].args = args\n    }\n  }\n\n  function handleBuffer(){\n    var buffer = query.slice(bStart, bEnd)\n    if (handlers[mode]){\n      handlers[mode](buffer)\n    }\n    mode = 'get'\n    bStart = bEnd + 1\n  }\n\n  for (var i = 0;i < query.length;i++){\n\n    // update char values\n    prevChar = char; char = nextChar; nextChar = query.charAt(i + 1);\n    pos = i - partOffset\n\n    // root query check\n    if (pos === 0 && (char !== ':' && char !== '.')){\n      result.push({root:true})\n    }\n\n    // parent query check\n    if (pos === 0 && (char === '.' && nextChar === '.')){\n      result.push({parent:true})\n    }\n\n    var token = tokens[char]\n    if (token){\n\n      // set mode\n      if (depth === 0 && (token.mode || token.open)){\n        handleBuffer()\n        mode = token.mode || token.open\n      }\n\n      if (depth === 0 && token.handle){\n        handleBuffer()\n        handlers[token.handle]()\n      }\n\n      if (token.open){\n        depth += 1\n      } else if (token.close){\n        depth -= 1\n      }\n\n      // reset mode to get\n      if (depth === 0 && token.close){\n        handleBuffer()\n      }\n\n    }\n\n    bEnd = i + 1\n\n  }\n\n  handleBuffer()\n  return result\n}\n\nfunction tokenizeArgs(argsQuery){\n  if (argsQuery === ',') return [',']\n  return depthSplit(argsQuery, /,/).map(function(s){\n    return handleSelectPart(s.trim())\n  })\n}\n\nfunction tokenizeSelect (selectQuery) {\n  if (selectQuery === '*') {\n    return {\n      values: true\n    }\n  } else if (selectQuery === '**') {\n    return {\n      values: true,\n      deep: true\n    }\n  }\n\n  var multiple = false\n  if (selectQuery.charAt(0) === '*') {\n    multiple = true\n    selectQuery = selectQuery.slice(1)\n  }\n\n  var booleanParts = depthSplit(selectQuery, /&|\\|/, { includeDelimiters: true })\n  if (booleanParts.length > 1) {\n    var result = [\n      getSelectPart(booleanParts[0].trim())\n    ]\n    for (var i = 1; i < booleanParts.length; i += 2) {\n      var part = getSelectPart(booleanParts[i + 1].trim())\n      if (part) {\n        part.booleanOp = booleanParts[i]\n        result.push(part)\n      }\n    }\n    return {\n      multiple: multiple,\n      boolean: true,\n      select: result\n    }\n  } else {\n    var result = getSelectPart(selectQuery.trim())\n    if (!result) {\n      return {\n        get: handleSelectPart(selectQuery.trim())\n      }\n    } else {\n      if (multiple) {\n        result.multiple = true\n      }\n      return result\n    }\n  }\n}\n\nfunction getSelectPart (selectQuery) {\n  var parts = depthSplit(selectQuery, /(!)?(=|~|\\:|<=|>=|<|>)/, { max: 2, includeDelimiters: true })\n  if (parts.length === 3) {\n    var negate = parts[1].charAt(0) === '!'\n    var key = handleSelectPart(parts[0].trim())\n    var result = {\n      negate: negate,\n      op: negate ? parts[1].slice(1) : parts[1]\n    }\n    if (result.op === ':') {\n      result.select = [key, {_sub: module.exports(':' + parts[2].trim())}]\n    } else if (result.op === '~') {\n      var value = handleSelectPart(parts[2].trim())\n      if (typeof value === 'string') {\n        var reDef = parts[2].trim().match(/^\\/(.*)\\/([a-z]?)$/)\n        if (reDef) {\n          result.select = [key, new RegExp(reDef[1], reDef[2])]\n        } else {\n          result.select = [key, value]\n        }\n      } else {\n        result.select = [key, value]\n      }\n    } else {\n      result.select = [key, handleSelectPart(parts[2].trim())]\n    }\n    return result\n  }\n}\n\nfunction isInnerQuery (text) {\n  return text.charAt(0) === '{' && text.charAt(text.length-1) === '}'\n}\n\nfunction handleSelectPart(part){\n  if (isInnerQuery(part)){\n    var innerQuery = part.slice(1, -1)\n    return {_sub: module.exports(innerQuery)}\n  } else {\n    return paramToken(part)\n  }\n}\n\nfunction paramToken(text){\n  if (text.charAt(0) === '?'){\n    var num = parseInt(text.slice(1))\n    if (!isNaN(num)){\n      return {_param: num}\n    } else {\n      return text\n    }\n  } else {\n    return text\n  }\n}\n\n\n\nfunction assignParamIds(query){\n  var index = 0\n  return query.replace(/\\?/g, function(match){\n    return match + (index++)\n  })\n}\n\nfunction last (array) {\n  return array[array.length - 1]\n}\n","/home/travis/build/npmtest/node-npmtest-json-query/json-query/lib/depth-split.js":"module.exports = depthSplit\n\nfunction depthSplit (text, delimiter, opts) {\n  var max = opts && opts.max || Infinity\n  var includeDelimiters = opts && opts.includeDelimiters || false\n\n  var depth = 0\n  var start = 0\n  var result = []\n  var zones = []\n\n  text.replace(/([\\[\\(\\{])|([\\]\\)\\}])/g, function (current, open, close, offset) {\n    if (open) {\n      if (depth === 0) {\n        zones.push([start, offset])\n      }\n      depth += 1\n    } else if (close) {\n      depth -= 1\n      if (depth === 0) {\n        start = offset + current.length\n      }\n    }\n  })\n\n  if (depth === 0 && start < text.length) {\n    zones.push([start, text.length])\n  }\n\n  start = 0\n\n  for (var i = 0; i < zones.length && max > 0; i++) {\n    for (\n      var pos = zones[i][0], match = delimiter.exec(text.slice(pos, zones[i][1]));\n      match && max > 1;\n      pos += match.index + match[0].length, start = pos, match = delimiter.exec(text.slice(pos, zones[i][1]))\n    ) {\n      result.push(text.slice(start, match.index + pos))\n      if (includeDelimiters) {\n        result.push(match[0])\n      }\n      max -= 1\n    }\n  }\n\n  if (start < text.length) {\n    result.push(text.slice(start))\n  }\n\n  return result\n}\n"}